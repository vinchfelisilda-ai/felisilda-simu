{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOsHChrM0MUBzyZMBcyh9M7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vinchfelisilda-ai/felisilda-simu/blob/main/Felisilda_Activity1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VShbHC-voSrF"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ed532606",
        "outputId": "3f24a050-0bdf-494c-af0d-1bb6b3dc2727"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create an array of 100,000 random values equally distributed between -2 and +3.3\n",
        "random_array = np.random.uniform(-2, 3.3, 100000)\n",
        "\n",
        "# Print the lowest and highest values of this array\n",
        "print(\"Lowest value:\", np.min(random_array))\n",
        "print(\"Highest value:\", np.max(random_array))"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Lowest value: -1.999959785563102\n",
            "Highest value: 3.2999805105482425\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f716eaf1",
        "outputId": "4609e682-9934-45ae-dff1-ad0d2dfd24c0"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create an array of 100,000 values using a normal distribution with an average of 0.3 and a standard deviation of 1.2\n",
        "normal_array = np.random.normal(loc=0.3, scale=1.2, size=100000)\n",
        "\n",
        "# Print the average and standard deviation of the values in this array\n",
        "print(\"Average of the normal array:\", np.mean(normal_array))\n",
        "print(\"Standard deviation of the normal array:\", np.std(normal_array))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average of the normal array: 0.3047480692009829\n",
            "Standard deviation of the normal array: 1.1996532055167275\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4f9e2226",
        "outputId": "d537dc64-ad91-4333-a08b-d384287efb6c"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create two arrays of 100,000 random values each (you can specify the distribution if needed, e.g., uniform)\n",
        "# For demonstration, let's use uniform distribution between 0 and 1\n",
        "random_array3 = np.random.rand(100000)\n",
        "random_array4 = np.random.rand(100000)\n",
        "\n",
        "# Create a new array where each value is the multiplication of corresponding values from the two arrays\n",
        "multiplied_array = random_array3 * random_array4\n",
        "\n",
        "# Print the average of the values in the new array\n",
        "print(\"Average of the multiplied array:\", np.mean(multiplied_array))"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average of the multiplied array: 0.24938060317015415\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0471a83c",
        "outputId": "4ec034d2-182d-4714-b80b-c75637e18a73"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create two arrays of 100,000 random values each (you can specify the distribution if needed, e.g., uniform)\n",
        "# For demonstration, let's use uniform distribution between 0 and 1\n",
        "random_array1 = np.random.rand(100000)\n",
        "random_array2 = np.random.rand(100000)\n",
        "\n",
        "# Create a new array where each value is the sum of corresponding values from the two arrays\n",
        "summed_array = random_array1 + random_array2\n",
        "\n",
        "# Print the average of the values in the new array\n",
        "print(\"Average of the summed array:\", np.mean(summed_array))"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Average of the summed array: 1.0002380016431909\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f7cbb2f7"
      },
      "source": [
        "# Task\n",
        "Create two arrays, a and b, where each are 100,000 random integers with values between 0 and 20. Create a new array, c, from c[i] = a[i] - b[i - 1]. Of course, the c array will have a length of 99,999. Create a histogram of these values with a range of -20 to +21."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0bdfc7f3"
      },
      "source": [
        "## Create arrays a and b\n",
        "\n",
        "### Subtask:\n",
        "Generate two arrays, each containing 100,000 random integers between 0 and 20.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "74bc8a8b"
      },
      "source": [
        "**Reasoning**:\n",
        "The subtask requires creating two NumPy arrays of random integers. The `numpy.random.randint` function is suitable for this purpose, specifying the low (inclusive) and high (exclusive) bounds, and the size of the array.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3fe8f7a3"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "# Create a NumPy array named a containing 100,000 random integers between 0 (inclusive) and 21 (exclusive).\n",
        "a = np.random.randint(0, 21, 100000)\n",
        "\n",
        "# Create a NumPy array named b containing 100,000 random integers between 0 (inclusive) and 21 (exclusive).\n",
        "b = np.random.randint(0, 21, 100000)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fa2bbfc8"
      },
      "source": [
        "## Create array c\n",
        "\n",
        "### Subtask:\n",
        "Calculate array c where each element is the difference between the corresponding element in array a and the previous element in array b.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7596603d"
      },
      "source": [
        "**Reasoning**:\n",
        "Calculate array c by subtracting the shifted array b from array a and print the length of c.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2665edf0",
        "outputId": "bbab87df-9ad2-4e71-e570-c1f9ca78f835"
      },
      "source": [
        "# Create a new array c where c[i] = a[i] - b[i-1]\n",
        "c = a[1:] - b[:-1]\n",
        "\n",
        "# Print the length of the resulting array c to verify it is 99,999\n",
        "print(\"Length of array c:\", len(c))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Length of array c: 99999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "e26d4d65"
      },
      "source": [
        "## Create histogram\n",
        "\n",
        "### Subtask:\n",
        "Generate a histogram of the values in array c with the specified range.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "92169656"
      },
      "source": [
        "**Reasoning**:\n",
        "Generate a histogram of the values in array c with the specified range and bins, and add labels and title.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "211cc847",
        "outputId": "24420561-c000-4165-c868-93fa797b71d5"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create a histogram of the c array\n",
        "plt.hist(c, bins=range(-20, 22), range=(-20, 21))\n",
        "\n",
        "# Add title and labels\n",
        "plt.title(\"Histogram of Array c (a[i] - b[i-1])\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "# Display the histogram\n",
        "plt.show()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f35b6aa5"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   Two arrays, `a` and `b`, were successfully created, each containing 100,000 random integers between 0 and 20.\n",
        "*   A new array, `c`, was calculated by subtracting the previous element of `b` from the current element of `a` (i.e., `c[i] = a[i] - b[i-1]`).\n",
        "*   As expected, the resulting array `c` had a length of 99,999.\n",
        "*   A histogram of the values in array `c` was successfully generated with a range from -20 to 21 and bins covering this range.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   The histogram visually represents the distribution of the differences between consecutive elements of the two random arrays. Given the random nature of the input arrays, the distribution in the histogram is expected to be centered around 0 and roughly symmetrical.\n",
        "*   Further analysis could involve calculating the mean and standard deviation of the values in array `c` to quantify the central tendency and spread of the differences.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f24ff222"
      },
      "source": [
        "# Task\n",
        "Create an array of 100,000 values from a normal distribution with an average of 3 and a standard deviation of 1.2. Plot the histogram of these values with a range of -0.6 to +0.6 and a bin width of 0.05."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2d3ad7b7"
      },
      "source": [
        "## Create array\n",
        "\n",
        "### Subtask:\n",
        "Generate an array of 100,000 values from a normal distribution with an average of 3 and a standard deviation of 1.2.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5f87c330"
      },
      "source": [
        "**Reasoning**:\n",
        "The subtask requires generating a NumPy array of random values from a normal distribution with a specified mean and standard deviation. The `numpy.random.normal` function is suitable for this purpose, specifying the location (mean), scale (standard deviation), and size of the array.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "65321a55"
      },
      "source": [
        "# Create a NumPy array named normal_distribution_array containing 100,000 values drawn from a normal distribution with a mean of 3 and a standard deviation of 1.2.\n",
        "normal_distribution_array = np.random.normal(loc=3, scale=1.2, size=100000)"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "13383efa"
      },
      "source": [
        "## Create histogram\n",
        "\n",
        "### Subtask:\n",
        "Generate a histogram of the values with the specified range and bin width.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4f77e204"
      },
      "source": [
        "**Reasoning**:\n",
        "Generate a histogram of the values with the specified range and bin width, and add labels and title.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 236
        },
        "id": "f5378bc8",
        "outputId": "b11b2196-d55a-482f-9e3f-90c7782d9aae"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define the range and bin width\n",
        "hist_range = (-0.6, 0.6)\n",
        "bin_width = 0.05\n",
        "\n",
        "# Calculate the number of bins\n",
        "bins = np.arange(hist_range[0], hist_range[1] + bin_width, bin_width)\n",
        "\n",
        "# Create a histogram of the normal_distribution_array\n",
        "plt.hist(normal_distribution_array, bins=bins, range=hist_range)\n",
        "\n",
        "# Add title and labels\n",
        "plt.title(\"Histogram of Normal Distribution\")\n",
        "plt.xlabel(\"Value\")\n",
        "plt.ylabel(\"Frequency\")\n",
        "\n",
        "# Display the histogram\n",
        "plt.show()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a77f1083"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   An array of 100,000 values was successfully generated from a normal distribution with a mean of 3 and a standard deviation of 1.2.\n",
        "*   A histogram of these values was created with a range of -0.6 to 0.6 and a bin width of 0.05.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   The histogram shows the distribution of the generated values within the specified narrow range, even though the full distribution is centered at 3.\n",
        "*   Further analysis could involve examining the histogram of the full dataset to understand the overall shape and spread of the normal distribution.\n"
      ]
    }
  ]
}